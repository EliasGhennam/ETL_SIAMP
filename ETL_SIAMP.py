#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
ETL_SIAMP.py ‚Äì fusion & enrichissement Turnover

‚Ä¢ R√©cup√®re les taux historiques si votre plan le permet (/historical),
  sinon bascule automatiquement sur le temps r√©el (/rates).
‚Ä¢ Ajoute VARIABLE COSTS (CD+FSD) et COGS (PRU) quelle que soit l‚Äô√©criture.
‚Ä¢ Maintient le calcul ¬´¬†C.A en ‚Ç¨¬†¬ª.Fdate
‚Ä¢ R√©ordonne les colonnes m√©tier.
"""
from __future__ import annotations
import argparse
import glob
import io
import os
import re
import sys
import warnings
import configparser
import traceback
from time import sleep
from typing import Any
import xml.etree.ElementTree as ET
from datetime import datetime
import pandas as pd
import requests
from openpyxl import load_workbook
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.utils import get_column_letter

# ------------------------------------------------------------------ console UTF‚Äë8
if sys.stdout and hasattr(sys.stdout, "buffer"):
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8", errors="replace")
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

***REMOVED***

# ------------------------------------------------------------------ taux de change
import requests
import xml.etree.ElementTree as ET
from datetime import datetime

def get_ecb_rates(date: str | None = None, required_currencies: set[str] | None = None):
    print(f"[DEBUG] Appel get_ecb_rates(date={date})", flush=True)
    if date:
        url = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist.xml"
    else:
        url = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"

    try:
        response = requests.get(url)
        print(f"[INFO] üì° Requ√™te vers {url}", flush=True)
        print(f"[INFO] ‚úÖ Statut : {response.status_code}", flush=True)
        response.raise_for_status()

        root = ET.fromstring(response.content)
        ns = {'ns': 'http://www.ecb.int/vocabulary/2002-08-01/eurofxref'}

        rates = {"EUR": 1.0}
        from datetime import datetime, timedelta

        if date:
            limit_date = (datetime.strptime(date, "%Y-%m-%d") - timedelta(days=60)).strftime("%Y-%m-%d")
            print(f"[INFO] üîç Recherche limit√©e aux taux entre {limit_date} et {date}", flush=True)



        dates = [cube.attrib["time"] for cube in root.findall(".//ns:Cube[@time]", ns)]
        if date:
            dates = sorted([d for d in dates if limit_date <= d <= date], reverse=True)
        else:
            dates = sorted(dates, reverse=True)


        rates_found = set(rates.keys())
        target_cube = None

        for d in dates:
            cube_d = root.find(f".//ns:Cube[@time='{d}']", ns)
            if cube_d is None:
                continue

            for cube in cube_d.findall("ns:Cube", ns):
                cur = cube.attrib["currency"]
                if cur not in rates:
                    rate = float(cube.attrib["rate"])
                    rates[cur] = rate
                    print(f"[INFO] ‚ûï Taux r√©cup√©r√© pour {cur} au {d} = {rate}", flush=True)
                    rates_found.add(cur)

            if required_currencies and required_currencies <= rates_found:
                print(f"[INFO] ‚úÖ Tous les taux requis trouv√©s avant {d}", flush=True)
                break


        if date:
            # chercher le jour exact OU le plus proche avant
            dates = [cube.attrib["time"] for cube in root.findall(".//ns:Cube[@time]", ns)]
            print(f"[INFO] üìÖ {len(dates)} dates trouv√©es dans l'historique ECB", flush=True)
            print(f"[INFO] üìÖ Premi√®res dates disponibles : {dates[:5]}", flush=True)
            dates.sort(reverse=True)
            target_date = None
            for d in dates:
                if d <= date:
                    target_date = d
                    break

            if not target_date:
                raise ValueError(f"Aucun taux trouv√© avant la date {date}")

            target_cube = root.find(f".//ns:Cube[@time='{target_date}']", ns)
            if target_date != date:
                print(f"[INFO] ‚ö†Ô∏è Pas de taux pour {date}, utilisation de {target_date} √† la place", flush=True)
            else:
                print(f"[INFO] ‚úÖ Taux trouv√©s pour la date exacte : {target_date}", flush=True)


            if target_date != date:
                print(f"[INFO] ‚ö† Aucun taux pour {date}, substitution par {target_date}", flush=True)
        else:
            # date non sp√©cifi√©e : dernier taux connu
            cubes = root.findall(".//Cube[@time]")
            if not cubes:
                raise ValueError("Pas de donn√©es de taux trouv√©es")
            target_cube = cubes[0]
            target_date = target_cube.attrib["time"]
        
        print("[INFO] üîé R√©cup√©ration des taux de conversion :", flush=True)
        for cube in target_cube.findall("ns:Cube", ns):
            currency = cube.attrib["currency"]
            raw_rate = float(cube.attrib["rate"])
            print(f"  ‚Üí {currency} = {raw_rate}", flush=True)
            if raw_rate != 0:
                rates[currency] = raw_rate
        rates["EUR"] = 1.0

        if required_currencies:
            missing = required_currencies - rates_found
            if missing:
                print(f"[WARN] ‚ùå Aucun taux trouv√© pour {sorted(missing)} dans les 60 derniers jours.", flush=True)
                print(f"[SUGGESTION] ‚úçÔ∏è Veuillez les ajouter manuellement dans l'interface ou en ligne de commande.", flush=True)



        print(f"[INFO] Taux ECB r√©cup√©r√©s au {date}", flush=True)
        for k, v in rates.items():
            print(f"  ‚Üí {k} = {v}")
        return rates

    except Exception as e:
        print(f"[ERROR] Erreur r√©cup√©ration ECB : {e}", flush=True)
        print("[FALLBACK] üõë Repli sur taux locaux cod√©s en dur", flush=True)
        return {
        "EUR":1.0, "USD":0.93, "GBP":1.15,
        "EGP":0.03, "CHF":1.04, "AED":0.25, "JPY":0.0062
    }

# ------------------------------------------------------------------ CLI
def main():
    parser = argparse.ArgumentParser(description="Fusionnez plusieurs fichiers Excel Turnover")
    parser.add_argument("--fichiers",      nargs='+', required=True)
    parser.add_argument("--chemin_sortie", required=True)
    parser.add_argument("--taux_manuels",  help="USD=0.93,GBP=1.15", default=None)
    parser.add_argument("--date",          help="YYYY-MM-DD pour historique (premium)", default=None)
    parser.add_argument("--date_debut", help="Date d√©but de la p√©riode √† filtrer (YYYY-MM-DD)", default=None)
    parser.add_argument("--date_fin",   help="Date fin de la p√©riode √† filtrer (YYYY-MM-DD)", default=None)
    parser.add_argument("--mois_selectionnes", help="Liste des mois √† traiter, s√©par√©s par des virgules (ex: 2025-02,2025-03)", default=None)

    args = parser.parse_args()
    # ----------------------------------------- Charger les chemins des fichiers de r√©f√©rence
    CONFIG_REF_FILE = "ref_files.cfg"
    zone_affectation_path = None
    table_path = None

    if os.path.exists(CONFIG_REF_FILE):
        config = configparser.ConfigParser()
        config.read(CONFIG_REF_FILE)
        refs = config['REFERENCES']
        zone_affectation_path = refs.get('zone_affectation', None)
        table_path = refs.get('table', None)
    else:
        print("[WARN] ‚ö†Ô∏è Fichier de config 'ref_files.cfg' introuvable. Les colonnes de correspondance ne seront pas aliment√©es.")


    devises_detect√©es: set[str] = set()

    print(f"[DEBUG] üëã Script lanc√© avec date = {args.date}", flush=True)

    # parse manuels
    manu: dict[str,float] = {}
    if args.taux_manuels:
        for part in args.taux_manuels.split(","):
            try:
                c,v = part.split("=")
                manu[c.strip().upper()] = float(v)
            except:
                print(f"[WARN] taux manuel ignor√©: {part}", flush=True)

    # collecte fichiers
    files: list[str] = []
    for patt in args.fichiers:
        files.extend(glob.glob(patt))
    files = [f for f in files if f.lower().endswith(".xlsx")
             and not os.path.basename(f).startswith("~$")]
    if not files:
        sys.exit("Aucun fichier .xlsx trouv√©.")

    out = args.chemin_sortie
    if not out.lower().endswith(".xlsx"):
        out += ".xlsx"
    os.makedirs(os.path.dirname(out) or ".", exist_ok=True)

    # patterns
    TURNOVER_SHEET = re.compile(r"^TURNOVER($|\s+[A-Z][a-z]{2}\s+\d{1,2}$)", re.I)
    VAR_PATTS  = [r"^CD\s*\+\s*FSD", r"^CD\+FSD", r"^VARIABLE\s*COSTS?"]
    COGS_PATTS = [r"^PRU", r"^COGS"]

    all_dfs: list[pd.DataFrame] = []
    total = len(files)
    for idx, path in enumerate(files, 1):
        print(f"[{idx}/{total}] {os.path.basename(path)}", flush=True)
        try:
            xls = pd.ExcelFile(path, engine="openpyxl")
            for sh in filter(TURNOVER_SHEET.match, xls.sheet_names):
                df = xls.parse(sh, usecols="A:Q")
                df.dropna(axis=1, how="all", inplace=True)
                df.columns = [c.strip() for c in df.columns]

                # renommage
                ren: dict[str,str] = {}
                for c in df.columns:
                    U = c.upper()
                    if any(re.match(p,U) for p in VAR_PATTS):
                        ren[c] = "VARIABLE COSTS"
                    elif any(re.match(p,U) for p in COGS_PATTS):
                        ren[c] = "COGS"
                    elif U=="TURNOVER":
                        ren[c] = "TURNOVER"
                    elif U=="CURRENCY":
                        ren[c] = "CURRENCY"
                    elif U in {"CUSTOMER","CUSTOMER NAME"}:
                        ren[c] = "CUSTOMER NAME"
                df.rename(columns=ren, inplace=True)

                print("    -> Colonnes:", ", ".join(df.columns), flush=True)

                # log var/cogs
                for nm in ("VARIABLE COSTS","COGS"):
                    if nm in df.columns:
                        n = df[nm].notna().sum()
                        print(f"       ‚Ä¢ {nm} d√©tect√©e: {n} valeurs non-null", flush=True)

                df["NOMFICHIER"] = os.path.basename(path)
                df["FEUILLE"]     = sh
                # Conversion explicite de la premi√®re colonne (MONTH) en datetime si possible
                if "MONTH" in df.columns:
                    try:
                        df["MONTH"] = pd.to_datetime(df["MONTH"], errors="coerce")
                        nb_dates = df["MONTH"].notna().sum()
                        print(f"       üìÖ Dates valides d√©tect√©es dans 'MONTH' : {nb_dates}", flush=True)
                    except Exception as e:
                        print(f"       ‚ö† Erreur conversion 'MONTH' en date : {e}", flush=True)

                all_dfs.append(df)

        except Exception as e:
            print(f"  [ERROR] {path}: {e}", flush=True)

        sleep(0.05)
        print(f"PROGRESS:{int(idx/total*100)}%", flush=True)

    if not all_dfs:
        sys.exit("Aucune feuille valide trouv√©e.")

    # ‚ûï Convertir en majuscules (important)
    devises_detect√©es = {d.upper() for d in devises_detect√©es}

    # ‚úÖ Maintenant que les devises sont d√©tect√©es, on appelle la fonction
    rates = get_ecb_rates(args.date, required_currencies=devises_detect√©es)
    rates.update(manu)

    zone_affectation_df = None
    table_df = None

    if table_path and os.path.exists(table_path):
        try:
            table_df = pd.read_excel(table_path, sheet_name="table", engine="openpyxl")
            print(f"[INFO] ‚úÖ Table charg√© ({table_df.shape[0]} lignes).")
        except Exception as e:
            print(f"[ERROR] ‚ùå Erreur chargement table : {e}")


    fusion = pd.concat(all_dfs, ignore_index=True)

    print(f"[DEBUG] üìå Rates r√©cup√©r√©s : {rates}", flush=True)
    currencies_in_file = set(fusion["CURRENCY"].dropna().unique())
    print(f"[DEBUG] üìå Devises trouv√©es dans les fichiers : {currencies_in_file}", flush=True)
    missing_currencies = currencies_in_file - set(rates.keys())
    if missing_currencies:
        print(f"[ERROR] ‚ùå Aucune correspondance de taux pour les devises suivantes : {missing_currencies}", flush=True)
        print("         ‚û°Ô∏è Ajoutez-les dans les taux manuels ou v√©rifiez les donn√©es sources.", flush=True)
        sys.exit(1)
    else:
        print("[INFO] ‚úÖ Tous les taux de conversion sont disponibles pour les devises pr√©sentes.", flush=True)


    # ---------------------------- ZONE AFFECTATION ----------------------------
    try:
        zone_affectation_df = pd.read_excel(
            zone_affectation_path,
            sheet_name="ZONE AFFECTATION",
            usecols="A,E",  # A = PAYS, E = Zone commerciale
            engine="openpyxl"
        )
        zone_affectation_df.columns = ["PAYS", "COMMERCIAL AREA"]
        fusion["COUNTRY"] = fusion["COUNTRY"].astype(str).str.strip().str.upper()
        zone_affectation_df["PAYS"] = zone_affectation_df["PAYS"].astype(str).str.strip().str.upper()
        
        fusion = fusion.merge(zone_affectation_df, how="left", left_on="COUNTRY", right_on="PAYS")
        fusion.drop(columns=["PAYS"], inplace=True)
        if "COMMERCIAL AREA_x" in fusion.columns and "COMMERCIAL AREA_y" in fusion.columns:
            fusion.drop(columns=["COMMERCIAL AREA_x"], inplace=True)
            fusion.rename(columns={"COMMERCIAL AREA_y": "COMMERCIAL AREA"}, inplace=True)
        elif "COMMERCIAL AREA_y" in fusion.columns:
            fusion.rename(columns={"COMMERCIAL AREA_y": "COMMERCIAL AREA"}, inplace=True)
        print(f"[INFO] ‚úÖ Fusion COMMERCIAL AREA effectu√©e.")
    except Exception as e:
        print(f"[ERROR] ‚ùå Erreur fusion ZONE AFFECTATION : {e}")
        traceback.print_exc()

    # ---------------------------- SUR FAMILLE ----------------------------
    try:
        fusion["REFERENCE"] = fusion["REFERENCE"].astype(str).str.strip()
        table_df.iloc[:, 14] = table_df.iloc[:, 14].astype(str).str.strip()  # colonne O
        fusion = fusion.merge(
            table_df[[table_df.columns[14], table_df.columns[16]]].rename(columns={
                table_df.columns[14]: "REFERENCE",
                table_df.columns[16]: "SUR FAMILLE"
            }),
            how="left",
            on="REFERENCE"
        )
        if "SUR FAMILLE_x" in fusion.columns and "SUR FAMILLE_y" in fusion.columns:
            fusion.drop(columns=["SUR FAMILLE_x"], inplace=True)
            fusion.rename(columns={"SUR FAMILLE_y": "SUR FAMILLE"}, inplace=True)
        elif "SUR FAMILLE_y" in fusion.columns:
            fusion.rename(columns={"SUR FAMILLE_y": "SUR FAMILLE"}, inplace=True)
        print(f"[INFO] ‚úÖ Fusion SUR FAMILLE effectu√©e.")
    except Exception as e:
        print(f"[ERROR] ‚ùå Erreur fusion SUR FAMILLE : {e}")
        traceback.print_exc()

    # ---------------------------- ENSEIGNE RET ----------------------------
    try:
        fusion["ENSEIGNE"] = fusion["ENSEIGNE"].fillna("").astype(str).str.strip()
        fusion["CUSTOMER NAME"] = fusion["CUSTOMER NAME"].fillna("").astype(str).str.strip()
        fusion["concat_key"] = fusion["ENSEIGNE"] + fusion["CUSTOMER NAME"]

        table_df["concat_key"] = table_df.iloc[:, 21].astype(str).str.strip()  # colonne V dans table

        fusion = fusion.merge(
            table_df[["concat_key", table_df.columns[22]]].rename(columns={table_df.columns[22]: "Enseigne ret"}),  # colonne W
            how="left",
            on="concat_key"
        )
        fusion.drop(columns=["concat_key"], inplace=True)
        print(f"[INFO] ‚úÖ Fusion Enseigne ret effectu√©e.")
    except Exception as e:
        print(f"[ERROR] ‚ùå Erreur fusion Enseigne ret : {e}")
        traceback.print_exc()

    # Supprimer la colonne 'ENSEIGNE' car elle n'est pas utile (copie de CUSTOMER NAME)
    if "ENSEIGNE" in fusion.columns:
        fusion.drop(columns=["ENSEIGNE"], inplace=True)
        print(f"[INFO] üóëÔ∏è Colonne 'ENSEIGNE' supprim√©e (inutile car remplac√©e par 'Enseigne ret').")





    # üîç Extraire les dates uniques de la colonne "MONTH"
    if "MONTH" in fusion.columns:
        try:
            fusion["MONTH"] = pd.to_datetime(fusion["MONTH"], errors="coerce")
            dates_disponibles = sorted(fusion["MONTH"].dropna().dt.strftime("%Y-%m-%d").unique())
        except Exception as e:
            print(f"[ERROR] Impossible de convertir les dates : {e}")
            dates_disponibles = []
    else:
        print("[WARN] ‚ùå Aucune colonne 'MONTH' trouv√©e.")
        dates_disponibles = []

    # üìã Afficher les dates disponibles pour que l'utilisateur les choisisse
    if dates_disponibles:
        print(f"\nüóìÔ∏è Dates d√©tect√©es dans les fichiers :\n" + "\n".join(f"  ‚Ä¢ {d}" for d in dates_disponibles))
        
        if args.mois_selectionnes:
            mois_choisis = args.mois_selectionnes.split(",")
            print(f"\n‚úÖ Mois choisis via l'interface : {mois_choisis}")
            fusion = fusion[fusion["MONTH"].dt.to_period("M").astype(str).isin(mois_choisis)]
        else:
            if os.environ.get("FROM_GUI") == "1":
                print("[ERROR] ‚ùå Aucun mois s√©lectionn√© et interaction impossible (lanc√© depuis GUI). Merci de s√©lectionner les mois dans l‚Äôinterface.")
                sys.exit(1)
            else:
                print("\n‚è≥ Entrez les dates √† inclure s√©par√©es par une virgule (ex: 2025-01-01,2025-01-15) :")
                user_input = input(">>> ").strip()
                dates_choisies = [d.strip() for d in user_input.split(",") if d.strip() in dates_disponibles]
                print(f"\n‚úÖ Dates retenues : {dates_choisies}\n")
                fusion = fusion[fusion["MONTH"].dt.strftime("%Y-%m-%d").isin(dates_choisies)]

    else:
        print("[WARN] ‚ùå Aucune date valide d√©tect√©e, aucun filtre appliqu√©.")


    fusion["CURRENCY"] = fusion["CURRENCY"].str.strip().str.upper()
    fusion["Taux ‚Ç¨"] = fusion["CURRENCY"].map(rates)

    fusion["C.A en ‚Ç¨"] = fusion.apply(
        lambda row: row["TURNOVER"] * row["Taux ‚Ç¨"]
        if pd.notnull(row.get("TURNOVER")) and pd.notnull(row.get("Taux ‚Ç¨"))
        else None,
        axis=1
    )

    # ‚ûï Calcul des marges
    fusion["VAR Margin"] = fusion.apply(
        lambda row: row["C.A en ‚Ç¨"] - (row["VARIABLE COSTS"] * row["Taux ‚Ç¨"] * row["QUANTITY"])
        if pd.notnull(row.get("C.A en ‚Ç¨")) and pd.notnull(row.get("VARIABLE COSTS")) and pd.notnull(row.get("Taux ‚Ç¨")) and pd.notnull(row.get("QUANTITY"))
        else None,
        axis=1
    )

    fusion["Margin"] = fusion.apply(
        lambda row: row["C.A en ‚Ç¨"] - (row["COGS"] * row["Taux ‚Ç¨"] * row["QUANTITY"])
        if pd.notnull(row.get("C.A en ‚Ç¨")) and pd.notnull(row.get("COGS")) and pd.notnull(row.get("Taux ‚Ç¨")) and pd.notnull(row.get("QUANTITY"))
        else None,
        axis=1
    )



    dev_non_g√©r√©es = devises_detect√©es - rates.keys()

    print(f"[INFO] üè¶ Devises d√©tect√©es dans les fichiers : {sorted(devises_detect√©es)}", flush=True)
    print(f"[INFO] ‚úÖ Taux disponibles ECB : {sorted(rates.keys())}", flush=True)

    if dev_non_g√©r√©es:
        print(f"[WARN] ‚ö† Les devises suivantes n'ont pas de taux ECB : {sorted(dev_non_g√©r√©es)}", flush=True)
    else:
        print(f"[INFO] üéâ Tous les taux de devises sont disponibles üéØ", flush=True)


    ORDER = [
    "MONTH", "SIAMP UNIT", "SALE TYPE", "TYPE OF CANAL", "CUSTOMER NAME",
    "COMMERCIAL AREA", "SUR FAMILLE", "FAMILLE", "REFERENCE", "PRODUCT NAME",
    "QUANTITY", "TURNOVER", "CURRENCY", "COUNTRY", "C.A en ‚Ç¨",
    "VARIABLE COSTS", "COGS", "VAR Margin", "Margin",
    "NOMFICHIER", "FEUILLE", "Enseigne ret"
]


    if fusion.empty:
        print("[ERROR] ‚ùå Aucune donn√©e apr√®s le filtrage, arr√™t du script.", flush=True)
        sys.exit(1)

    fusion = fusion[[c for c in ORDER if c in fusion.columns]
                    + [c for c in fusion.columns if c not in ORDER]]

    fusion.to_excel(out, index=False)
    print(f"[DEBUG] üìÑ Fichier Excel sauvegard√© : {out}", flush=True)
    print(f"[DEBUG] üìè Shape du DataFrame fusionn√© : {fusion.shape}", flush=True)

    # mise en forme Excel
    print("[DEBUG] üü° D√©but de la mise en forme Excel...", flush=True)
    try:
        wb = load_workbook(out)
        ws = wb.active

        print(f"[DEBUG] üìä Workbook charg√© : {out}", flush=True)
        print(f"[DEBUG] Nombre de lignes : {ws.max_row}, Nombre de colonnes : {ws.max_column}", flush=True)

        if ws.max_row > 1 and ws.max_column > 0:
            last_col_letter = get_column_letter(ws.max_column)
            last_row = ws.max_row
            table_range = f"A1:{last_col_letter}{last_row}"
            print(f"[DEBUG] üñãÔ∏è D√©finition de la table FusionTable sur la plage : {table_range}", flush=True)

            table = Table(displayName="FusionTable", ref=table_range)
            table.tableStyleInfo = TableStyleInfo(
                name="TableStyleMedium9",
                showFirstColumn=False,
                showLastColumn=False,
                showRowStripes=True,
                showColumnStripes=False
            )

            # ‚ûñ S√©curiser la suppression et l‚Äôajout de la table
            print(f"[DEBUG] Type de ws._tables : {type(ws._tables)}", flush=True)
            print(f"[DEBUG] Contenu de ws._tables : {ws._tables}", flush=True)

            try:
                if hasattr(ws, "_tables"):
                    if isinstance(ws._tables, dict):
                        table_names = list(ws._tables.keys())
                        print(f"[DEBUG] üóëÔ∏è Tables existantes (dict) : {table_names}", flush=True)
                        if "FusionTable" in table_names:
                            del ws._tables["FusionTable"]
                            print("[INFO] üóëÔ∏è Ancienne table 'FusionTable' supprim√©e (dict)", flush=True)
                    elif isinstance(ws._tables, (list, tuple)):
                        table_names = [tbl.name for tbl in ws._tables]
                        print(f"[DEBUG] üóëÔ∏è Tables existantes (list/tuple) : {table_names}", flush=True)
                        ws._tables = [tbl for tbl in ws._tables if tbl.name != "FusionTable"]
                        print("[INFO] üóëÔ∏è Ancienne table 'FusionTable' supprim√©e (list/tuple)", flush=True)
                    else:
                        print("[WARN] ‚ùì Type inattendu pour ws._tables", flush=True)
            except Exception as e:
                print(f"[ERROR] ‚ùå Probl√®me pendant la suppression de la table existante : {e}", flush=True)
                traceback.print_exc()
                sys.exit(1)

            print("[DEBUG] ‚úÖ Suppression des anciennes tables termin√©e. Tentative d‚Äôajout de la nouvelle table...", flush=True)

            try:
                print(f"[DEBUG] üìè Table range calcul√© : {table_range}", flush=True)
                assert last_row > 1, "[ASSERTION FAILED] ‚ùå last_row <= 1 : pas assez de lignes"
                assert ws.max_column > 0, "[ASSERTION FAILED] ‚ùå max_column == 0 : aucune colonne d√©tect√©e"

                ws.add_table(table)
                print("[DEBUG] ‚úÖ Nouvelle table 'FusionTable' ajout√©e avec succ√®s", flush=True)
            except Exception as e:
                print(f"[ERROR] ‚ùå √âchec de ws.add_table() : {e}", flush=True)
                traceback.print_exc()
                sys.exit(1)

            # ‚ûï Formatage des colonnes ‚Ç¨
            EURO_COLUMNS = {"C.A en ‚Ç¨", "VAR Margin", "Margin"}
            print("[DEBUG] üéØ Formatage des colonnes ‚Ç¨...", flush=True)
            for col_idx in range(1, ws.max_column + 1):
                header = ws.cell(row=1, column=col_idx).value
                if header in EURO_COLUMNS:
                    for row_idx in range(2, last_row + 1):
                        cell = ws.cell(row=row_idx, column=col_idx)
                        cell.number_format = u"#,##0.00\u00a0‚Ç¨"
            print("[DEBUG] ‚úÖ Formatage des colonnes ‚Ç¨ termin√©", flush=True)
        else:
            print("[WARN] ‚ö†Ô∏è Impossible d'ajouter la table : pas assez de donn√©es (0 colonne ou 1 ligne).", flush=True)

        wb.save(out)
        print(f"\n‚úÖ Fusion termin√©e ‚Äì fichier cr√©√© : {out}\n", flush=True)

    except Exception as e:
        print(f"[ERROR] ‚ùå Une erreur s'est produite pendant la mise en forme Excel : {e}", flush=True)
        sys.exit(1)



# --------------------------------------------------
# Lancement s√©curis√© du script avec capture des erreurs
# --------------------------------------------------
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"[FATAL ERROR] ‚ùå Le script a plant√© avec l'exception : {e}", flush=True)
        import traceback
        traceback.print_exc()
        sys.exit(1)